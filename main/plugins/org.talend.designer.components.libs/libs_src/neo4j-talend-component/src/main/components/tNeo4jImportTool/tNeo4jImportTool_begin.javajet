<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
        java.util.Map
        java.util.HashMap
	"
%>

<%
    // General Talend object
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    // Component parameters
    String dbPath = ElementParameterParser.getValue(node, "__DATABASE_PATH__");
    List<Map<String, String>> nodesFiles = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__NODE_FILES__");
    List<Map<String, String>> relationshipsFiles = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__RELATIONSHIP_FILES__");
    List<Map<String, String>> importConfig = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__IMPORT_CONFIGURATION__");
    List<Map<String, String>> neo4jConfig = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__NEO4J_CONFIGURATION__");
%>

// Transform nodes files params
java.util.List<java.util.Map<String, String>> nodes = new java.util.ArrayList();
<%
    if (nodesFiles != null) {
        int i=0;
        for (java.util.Map<String, String> params : nodesFiles) {
            i++;
            %>
                java.util.Map<String, String> mapN_<%=i%> = new java.util.HashMap<>();
                <%
                    for(java.util.Map.Entry<String, String> entry : params.entrySet()) {
                %>
                    mapN_<%=i%>.put("<%=entry.getKey()%>", <%=entry.getValue()%>);
                <%
                    }
                %>
                nodes.add(mapN_<%=i%>);
            <%
        }
    }
%>

// Transform nodes files params to a List
java.util.List<java.util.Map<String, String>> relationships = new java.util.ArrayList();
<%
    if (relationshipsFiles != null) {
        int j=0;
        for (java.util.Map<String, String> params : relationshipsFiles) {
            j++;
            %>
            java.util.Map<String, String> mapR_<%=j%> = new java.util.HashMap<>();
            <%
                for(java.util.Map.Entry<String, String> entry : params.entrySet()) {
            %>
                mapR_<%=j%>.put("<%=entry.getKey()%>", <%=entry.getValue()%>);
            <%
                }
            %>
            relationships.add(mapR_<%=j%>);
        <%
        }
    }
%>

// Transform neo4j configuration params to a Map
java.util.Map<String, String> configNeo = new java.util.HashMap();
<%
    if (neo4jConfig != null) {
        for (Map<String, String> params : neo4jConfig) {
            %>
                configNeo.put("<%=params.get("KEY")%>", <%=params.get("VALUE")%>);
            <%
        }
    }
%>

// Transform import configuration params to a Map
java.util.Map<String, String> configImport = new java.util.HashMap();
<%
    if (importConfig != null) {
        for (Map<String, String> params : importConfig) {
            %>
                configImport.put("<%=params.get("KEY")%>", <%=params.get("VALUE")%>);
            <%
        }
    }
%>


// Just create the importTool
org.neo4j.talend.Neo4jImportTool neo4jImportTool_<%=cid%> = new org.neo4j.talend.Neo4jImportTool(<%=dbPath%>, configNeo, configImport, nodes, relationships);
